name: CMake

on:
  push:
    branches: 
      - production
      - hotfix
      - main
  pull_request:
    branches: 
      - production
      - hotfix
      - main

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Create CI Files
      if: steps.cache-ci-files.outputs.cache-hit != 'true'
      run: mkdir cmake && touch CMakeLists.txt cmake/FindSDL2.cmake cmake/FindSDL2_image.cmake cmake/FindSDL2_ttf.cmake cmake/FindSDL2_mixer.cmake
    
    - name: Write CMakeLists File
      if: steps.cache-ci-files.outputs.cache-hit != 'true'
      # You may pin to the exact commit or the version.
      # uses: DamianReeves/write-file-action@e19fd875ed54f16fc583a3486e62547ce4a5dde8
      uses: DamianReeves/write-file-action@v1.0
      with:
        # The path to the file to write
        path: CMakeLists.txt
        # The contents of the file
        contents: |
          cmake_minimum_required(VERSION 3.0)
          project(GameProject)
          file(GLOB SOURCES ${GameProject_SOURCE_DIR}/src/*.cpp ${GameProject_SOURCE_DIR}/src/*.hpp)
          set(BIN_DIR ${GameProject_SOURCE_DIR}/bin)
          list(APPEND CMAKE_MODULE_PATH ${GameProject_SOURCE_DIR}/cmake)
          
          if (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU" OR ${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
              set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -pedantic -std=c++17")
              set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG} -g")
              set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE} -O2")
          elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL "MSVC")
              if (CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
                  string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
              else()
                  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
              endif()
          endif()
          
          find_package(SDL2 REQUIRED)
          include_directories(${SDL2_INCLUDE_DIR})
          find_package(SDL2_image REQUIRED)
          include_directories(${SDL2_IMAGE_INCLUDE_DIR})
          find_package(SDL2_mixer REQUIRED)
          include_directories(${SDL2_MIXER_INCLUDE_DIR})
          find_package(SDL2_ttf REQUIRED)
          include_directories(${SDL2_TTF_INCLUDE_DIR})
          add_executable(GameProject ${SOURCES})
          include_directories(include)
          target_link_libraries(GameProject ${SDL2_LIBRARY} ${SDL2_IMAGE_LIBRARY} ${SDL2_TTF_LIBRARY} ${SDL2_MIXER_LIBRARY})
          install(TARGETS GameProject RUNTIME DESTINATION ${BIN_DIR})

        # The mode of writing to use: `overwrite`, `append`, or `preserve`.
        write-mode: # optional, default is preserve
          overwrite

    - name: Write FindSDL2 File
      if: steps.cache-ci-files.outputs.cache-hit != 'true'
      # You may pin to the exact commit or the version.
      # uses: DamianReeves/write-file-action@e19fd875ed54f16fc583a3486e62547ce4a5dde8
      uses: DamianReeves/write-file-action@v1.0
      with:
        # The path to the file to write
        path: cmake/FindSDL2.cmake
        # The contents of the file
        contents: |
          FIND_PATH(SDL2_INCLUDE_DIR SDL.h
            HINTS
            ${SDL2}
            $ENV{SDL2}
            PATH_SUFFIXES include/SDL2 include SDL2
            i686-w64-mingw32/include/SDL2
            x86_64-w64-mingw32/include/SDL2
            PATHS
            ~/Library/Frameworks
            /Library/Frameworks
            /usr/local/include/SDL2
            /usr/include/SDL2
            /sw # Fink
            /opt/local # DarwinPorts
            /opt/csw # Blastwave
            /opt
          )

          # Lookup the 64 bit libs on x64
          IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
            FIND_LIBRARY(SDL2_LIBRARY_TEMP SDL2
              HINTS
              ${SDL2}
              $ENV{SDL2}
              PATH_SUFFIXES lib64 lib
              lib/x64
              x86_64-w64-mingw32/lib
              PATHS
              /sw
              /opt/local
              /opt/csw
              /opt
            )
          # On 32bit build find the 32bit libs
          ELSE(CMAKE_SIZEOF_VOID_P EQUAL 8)
            FIND_LIBRARY(SDL2_LIBRARY_TEMP SDL2
              HINTS
              ${SDL2}
              $ENV{SDL2}
              PATH_SUFFIXES lib
              lib/x86
              i686-w64-mingw32/lib
              PATHS
              /sw
              /opt/local
              /opt/csw
              /opt
            )
          ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)

          IF(NOT SDL2_BUILDING_LIBRARY)
            IF(NOT ${SDL2_INCLUDE_DIR} MATCHES ".framework")
              # Non-OS X framework versions expect you to also dynamically link to
              # SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms
              # seem to provide SDL2main for compatibility even though they don't
              # necessarily need it.
              # Lookup the 64 bit libs on x64
              IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
                FIND_LIBRARY(SDL2MAIN_LIBRARY
                  NAMES SDL2main
                  HINTS
                  ${SDL2}
                  $ENV{SDL2}
                  PATH_SUFFIXES lib64 lib
                  lib/x64
                  x86_64-w64-mingw32/lib
                  PATHS
                  /sw
                  /opt/local
                  /opt/csw
                  /opt
                  )
                # On 32bit build find the 32bit libs
              ELSE(CMAKE_SIZEOF_VOID_P EQUAL 8)
                FIND_LIBRARY(SDL2MAIN_LIBRARY
                  NAMES SDL2main
                  HINTS
                  ${SDL2}
                  $ENV{SDL2}
                  PATH_SUFFIXES lib
                  lib/x86
                  i686-w64-mingw32/lib
                  PATHS
                  /sw
                  /opt/local
                  /opt/csw
                  /opt
                  )
              ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)
            ENDIF(NOT ${SDL2_INCLUDE_DIR} MATCHES ".framework")
          ENDIF(NOT SDL2_BUILDING_LIBRARY)

          # SDL2 may require threads on your system.
          # The Apple build may not need an explicit flag because one of the
          # frameworks may already provide it.
          # But for non-OSX systems, I will use the CMake Threads package.
          IF(NOT APPLE)
            FIND_PACKAGE(Threads)
          ENDIF(NOT APPLE)

          # MinGW needs an additional library, mwindows
          # It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows
          # (Actually on second look, I think it only needs one of the m* libraries.)
          IF(MINGW)
            SET(MINGW32_LIBRARY mingw32 CACHE STRING "mwindows for MinGW")
          ENDIF(MINGW)

          SET(SDL2_FOUND "NO")
            IF(SDL2_LIBRARY_TEMP)
              # For SDL2main
              IF(NOT SDL2_BUILDING_LIBRARY)
                IF(SDL2MAIN_LIBRARY)
                  SET(SDL2_LIBRARY_TEMP ${SDL2MAIN_LIBRARY} ${SDL2_LIBRARY_TEMP})
                ENDIF(SDL2MAIN_LIBRARY)
              ENDIF(NOT SDL2_BUILDING_LIBRARY)

              # For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.
              # CMake doesn't display the -framework Cocoa string in the UI even
              # though it actually is there if I modify a pre-used variable.
              # I think it has something to do with the CACHE STRING.
              # So I use a temporary variable until the end so I can set the
              # "real" variable in one-shot.
              IF(APPLE)
                SET(SDL2_LIBRARY_TEMP ${SDL2_LIBRARY_TEMP} "-framework Cocoa")
              ENDIF(APPLE)

              # For threads, as mentioned Apple doesn't need this.
              # In fact, there seems to be a problem if I used the Threads package
              # and try using this line, so I'm just skipping it entirely for OS X.
              IF(NOT APPLE)
                SET(SDL2_LIBRARY_TEMP ${SDL2_LIBRARY_TEMP} ${CMAKE_THREAD_LIBS_INIT})
              ENDIF(NOT APPLE)

              # For MinGW library
              IF(MINGW)
                SET(SDL2_LIBRARY_TEMP ${MINGW32_LIBRARY} ${SDL2_LIBRARY_TEMP})
              ENDIF(MINGW)

              # Set the final string here so the GUI reflects the final state.
              SET(SDL2_LIBRARY ${SDL2_LIBRARY_TEMP} CACHE STRING "Where the SDL2 Library can be found")
              # Set the temp variable to INTERNAL so it is not seen in the CMake GUI
              SET(SDL2_LIBRARY_TEMP "${SDL2_LIBRARY_TEMP}" CACHE INTERNAL "")

              SET(SDL2_FOUND "YES")
          ENDIF(SDL2_LIBRARY_TEMP)

          INCLUDE(FindPackageHandleStandardArgs)

          FIND_PACKAGE_HANDLE_STANDARD_ARGS(SDL2 REQUIRED_VARS SDL2_LIBRARY SDL2_INCLUDE_DIR)

        # The mode of writing to use: `overwrite`, `append`, or `preserve`.
        write-mode: # optional, default is preserve
          overwrite

    - name: Write FindSDL2_image File
      if: steps.cache-ci-files.outputs.cache-hit != 'true'
      # You may pin to the exact commit or the version.
      # uses: DamianReeves/write-file-action@e19fd875ed54f16fc583a3486e62547ce4a5dde8
      uses: DamianReeves/write-file-action@v1.0
      with:
        # The path to the file to write
        path: cmake/FindSDL2_image.cmake
        # The contents of the file
        contents: |
          FIND_PATH(SDL2_IMAGE_INCLUDE_DIR SDL_image.h
            HINTS
            ${SDL2}
            $ENV{SDL2}
            $ENV{SDL2_IMAGE}
            PATH_SUFFIXES include/SDL2 include SDL2
            i686-w64-mingw32/include/SDL2
            x86_64-w64-mingw32/include/SDL2
            PATHS
            ~/Library/Frameworks
            /Library/Frameworks
            /usr/local/include/SDL2
            /usr/include/SDL2
            /sw # Fink
            /opt/local # DarwinPorts
            /opt/csw # Blastwave
            /opt
          )

          # Lookup the 64 bit libs on x64
          IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
            FIND_LIBRARY(SDL2_IMAGE_LIBRARY_TEMP
              NAMES SDL2_image
              HINTS
              ${SDL2}
              $ENV{SDL2}
              $ENV{SDL2_IMAGE}
              PATH_SUFFIXES lib64 lib
              lib/x64
              x86_64-w64-mingw32/lib
              PATHS
              /sw
              /opt/local
              /opt/csw
              /opt
            )
          # On 32bit build find the 32bit libs
          ELSE(CMAKE_SIZEOF_VOID_P EQUAL 8)
            FIND_LIBRARY(SDL2_IMAGE_LIBRARY_TEMP
              NAMES SDL2_image
              HINTS
              ${SDL2}
              $ENV{SDL2}
              $ENV{SDL2_IMAGE}
              PATH_SUFFIXES lib
              lib/x86
              i686-w64-mingw32/lib
              PATHS
              /sw
              /opt/local
              /opt/csw
              /opt
            )
          ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)

          SET(SDL2_IMAGE_FOUND "NO")
            IF(SDL2_IMAGE_LIBRARY_TEMP)
            # Set the final string here so the GUI reflects the final state.
            SET(SDL2_IMAGE_LIBRARY ${SDL2_IMAGE_LIBRARY_TEMP} CACHE STRING "Where the SDL2_image Library can be found")
            # Set the temp variable to INTERNAL so it is not seen in the CMake GUI
            SET(SDL2_IMAGE_LIBRARY_TEMP "${SDL2_IMAGE_LIBRARY_TEMP}" CACHE INTERNAL "")
            SET(SDL2_IMAGE_FOUND "YES")
          ENDIF(SDL2_IMAGE_LIBRARY_TEMP)

          INCLUDE(FindPackageHandleStandardArgs)

          FIND_PACKAGE_HANDLE_STANDARD_ARGS(SDL2_image REQUIRED_VARS SDL2_IMAGE_LIBRARY SDL2_IMAGE_INCLUDE_DIR)

        # The mode of writing to use: `overwrite`, `append`, or `preserve`.
        write-mode: # optional, default is preserve
          overwrite

    - name: Write FindSDL2_ttf File
      if: steps.cache-ci-files.outputs.cache-hit != 'true'
      # You may pin to the exact commit or the version.
      # uses: DamianReeves/write-file-action@e19fd875ed54f16fc583a3486e62547ce4a5dde8
      uses: DamianReeves/write-file-action@v1.0
      with:
        # The path to the file to write
        path: cmake/FindSDL2_ttf.cmake
        # The contents of the file
        contents: |
          FIND_PATH(SDL2_TTF_INCLUDE_DIR SDL_ttf.h
            HINTS
            ${SDL2}
            $ENV{SDL2}
            $ENV{SDL2_TTF}
            PATH_SUFFIXES include/SDL2 include SDL2
            i686-w64-mingw32/include/SDL2
            x86_64-w64-mingw32/include/SDL2
            PATHS
            ~/Library/Frameworks
            /Library/Frameworks
            /usr/local/include/SDL2
            /usr/include/SDL2
            /sw # Fink
            /opt/local # DarwinPorts
            /opt/csw # Blastwave
            /opt
          )

          # Lookup the 64 bit libs on x64
          IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
            FIND_LIBRARY(SDL2_TTF_LIBRARY_TEMP
              NAMES SDL2_ttf
              HINTS
              ${SDL2}
              $ENV{SDL2}
              $ENV{SDL2_TTF}
              PATH_SUFFIXES lib64 lib
              lib/x64
              x86_64-w64-mingw32/lib
              PATHS
              /sw
              /opt/local
              /opt/csw
              /opt
            )
          # On 32bit build find the 32bit libs
          ELSE(CMAKE_SIZEOF_VOID_P EQUAL 8)
            FIND_LIBRARY(SDL2_TTF_LIBRARY_TEMP
              NAMES SDL2_ttf
              HINTS
              ${SDL2}
              $ENV{SDL2}
              $ENV{SDL2_TTF}
              PATH_SUFFIXES lib
              lib/x86
              i686-w64-mingw32/lib
              PATHS
              /sw
              /opt/local
              /opt/csw
              /opt
            )
          ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)

          SET(SDL2_TTF_FOUND "NO")
            IF(SDL2_TTF_LIBRARY_TEMP)
            # Set the final string here so the GUI reflects the final state.
            SET(SDL2_TTF_LIBRARY ${SDL2_TTF_LIBRARY_TEMP} CACHE STRING "Where the SDL2_ttf Library can be found")
            # Set the temp variable to INTERNAL so it is not seen in the CMake GUI
            SET(SDL2_TTF_LIBRARY_TEMP "${SDL2_TTF_LIBRARY_TEMP}" CACHE INTERNAL "")
            SET(SDL2_TTF_FOUND "YES")
          ENDIF(SDL2_TTF_LIBRARY_TEMP)

          INCLUDE(FindPackageHandleStandardArgs)

          FIND_PACKAGE_HANDLE_STANDARD_ARGS(SDL2_ttf REQUIRED_VARS SDL2_TTF_LIBRARY SDL2_TTF_INCLUDE_DIR)

        # The mode of writing to use: `overwrite`, `append`, or `preserve`.
        write-mode: # optional, default is preserve
          overwrite

    - name: Write FindSDL2_mixer File
      if: steps.cache-ci-files.outputs.cache-hit != 'true'
      # You may pin to the exact commit or the version.
      # uses: DamianReeves/write-file-action@e19fd875ed54f16fc583a3486e62547ce4a5dde8
      uses: DamianReeves/write-file-action@v1.0
      with:
        # The path to the file to write
        path: cmake/FindSDL2_mixer.cmake
        # The contents of the file
        contents: |
          FIND_PATH(SDL2_MIXER_INCLUDE_DIR SDL_mixer.h
            HINTS
            ${SDL2}
            $ENV{SDL2}
            $ENV{SDL2_MIXER}
            PATH_SUFFIXES include/SDL2 include SDL2
            i686-w64-mingw32/include/SDL2
            x86_64-w64-mingw32/include/SDL2
            PATHS
            ~/Library/Frameworks
            /Library/Frameworks
            /usr/local/include/SDL2
            /usr/include/SDL2
            /sw # Fink
            /opt/local # DarwinPorts
            /opt/csw # Blastwave
            /opt
          )

          # Lookup the 64 bit libs on x64
          IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
            FIND_LIBRARY(SDL2_MIXER_LIBRARY_TEMP
              NAMES SDL2_mixer
              HINTS
              ${SDL2}
              $ENV{SDL2}
              $ENV{SDL2_MIXER}
              PATH_SUFFIXES lib64 lib
              lib/x64
              x86_64-w64-mingw32/lib
              PATHS
              /sw
              /opt/local
              /opt/csw
              /opt
            )
          # On 32bit build find the 32bit libs
          ELSE(CMAKE_SIZEOF_VOID_P EQUAL 8)
            FIND_LIBRARY(SDL2_MIXER_LIBRARY_TEMP
              NAMES SDL2_mixer
              HINTS
              ${SDL2}
              $ENV{SDL2}
              $ENV{SDL2_MIXER}
              PATH_SUFFIXES lib
              lib/x86
              i686-w64-mingw32/lib
              PATHS
              /sw
              /opt/local
              /opt/csw
              /opt
            )
          ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)

          SET(SDL2_MIXER_FOUND "NO")
            IF(SDL2_MIXER_LIBRARY_TEMP)
            # Set the final string here so the GUI reflects the final state.
            SET(SDL2_MIXER_LIBRARY ${SDL2_MIXER_LIBRARY_TEMP} CACHE STRING "Where the SDL2_mixer Library can be found")
            # Set the temp variable to INTERNAL so it is not seen in the CMake GUI
            SET(SDL2_MIXER_LIBRARY_TEMP "${SDL2_MIXER_LIBRARY_TEMP}" CACHE INTERNAL "")
            SET(SDL2_MIXER_FOUND "YES")
          ENDIF(SDL2_MIXER_LIBRARY_TEMP)

          INCLUDE(FindPackageHandleStandardArgs)

          FIND_PACKAGE_HANDLE_STANDARD_ARGS(SDL2_mixer REQUIRED_VARS SDL2_MIXER_LIBRARY SDL2_MIXER_INCLUDE_DIR)

        # The mode of writing to use: `overwrite`, `append`, or `preserve`.
        write-mode: # optional, default is preserve
          overwrite

    - name: Update Library
      run: sudo apt update && sudo apt install -y libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev libsdl2-mixer-dev

    - name: Make build directory
      run: rm -rf build && mkdir build

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
